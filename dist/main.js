(()=>{"use strict";function e(e=null,l=null){return{value:e,next:l}}function l(l){let n=e(l);return{headNode:n,append:l=>{let o=n;for(;null!==o.next;)o=o.next;o.next=e(l)},prepend:l=>{let o=e(l);console.log(`new head ${o.value}`);let t=e(n.value,n.next);console.log(`old head ${t.value}`),o.next=t,n.value=o.value,n.next=o.next,console.log(`headNode ${n.value}`)},size:()=>{if(null==n.next&&null==n.value)return 0;let e=1,l=n;for(;null!==l.next;)l=l.next,e++;return e},head:()=>n,tail:()=>{let e=n;for(;null!==e.next;)e=e.next;return e},at:e=>{let l=n;for(let n=0;n<e;n++)l=l.next;return l},pop:()=>{null==n.next&&(n.value=null);let e=n,l={};for(;null!==e.next;)l=e,e=e.next;l.next=null},contains:e=>{let l=n;for(;null!==l.next;){if(l.value==e)return!0;l=l.next}return l.value==e},find:e=>{let l=n,o=0;for(;null!==l.next;){if(l.value==e)return o;l=l.next,o++}return l.value==e?o:null},toString:()=>{let e="",l=n;for(;null!==l.next;)e=e.concat(`( ${l.value.key} ) -> `),l=l.next;console.log(e.concat(`( ${l.value.key} ) -> null`))}}}let n=function(e){let n=new Array(e),o=e;const t=l=>{let n=0;for(let o=0;o<l.length;o++)n=(31*n+l.charCodeAt(o))%e;return console.log(`${l} is ${n}`),n},r=(e,l)=>{let n=l,o=0;for(;null!==n.next;){if(console.log(`findvalue.value is ${n.value.key}`),n.value.key==e)return o;n=n.next,o++}return n.value.key==e?o:null},a=()=>{let l=0;for(let o=0;o<e;o++)null==n[o]||(n[o].hasOwnProperty("headNode")?l+=n[o].size():l++);return l};return{myMap:n,hash:t,set:(r,u)=>{let s=t(r);if(console.log(`index is ${s}`),console.log(`key is ${r}`),s<0||s>=e)throw new Error("Trying to access index out of bound");if(.75*e<a()&&(()=>{let l=new Array(o);n.push(...l),e+=o})(),null==n[s]||n[s].key==r)n[s]={key:r,data:u};else if(null!=n[s]){console.log("RUH ROH theres a collision"),console.log(n[s]);let e=n[s];if(null==e.headNode){let o=l(e);o.append({key:r,data:u}),n[s]=o}else n[s].append({key:r,data:u})}},get:l=>{let o=t(l);if(o<0||o>=e)throw new Error("Trying to access index out of bound");if(n[o].key==l)return n[o].data;if(null!=n[o].headNode){let e=r(l,n[o].headNode);return n[o].at(e).value.data}return null},has:l=>{let o=t(l);if(o<0||o>=e)throw new Error("Trying to access index out of bound");return null!=n[o]&&(n[o].key==l||null!=n[o].headNode&&null!=r(l,n[o].headNode))},remove:o=>{let a=t(o);if(a<0||a>=e)throw new Error("Trying to access index out of bound");if(console.log("before:"),n[a].toString(),n[a].key==o&&null==n[a].headNode)return console.log("if not a linked list, just make it undefined"),n[a]=void 0,!0;if(n[a].headNode.value.key!=o||null==n[a].headNode.next){if(null!=n[a].headNode){console.log("if a linked list"),console.log("before:"),n[a].toString();let e=n[a],t=e.headNode,u=r(o,e.headNode);console.log(`i is ${u}`);let s=e.size(),d=l(e.headNode.value);for(let e=1;e<s;e++)e!=u&&d.append(t.next.value),t=t.next;return console.log("after:"),d.toString(),n[a]=d,!0}return!1}console.log("it's the first node"),n[a].headNode.value=n[a].headNode.next.value,n[a].headNode.next=n[a].headNode.next.next,console.log("after:"),n[a].toString()},length:a,clear:()=>{for(i=0;i<e;i++)n[i]=void 0},keys:()=>{let l=[],o=0;for(let t=0;t<e;t++){console.log(`myMap${t} is ${n[t]}`);let e=n[t];if(null==e);else if(e.hasOwnProperty("headNode")){console.log("its a linked list");for(let n=0;n<e.size();n++)l[o]=e.at(n).value.key,o++}else l[o]=e.key,o++}return console.log(l),l},values:()=>{let l=[],o=0;for(let t=0;t<e;t++)if(null==n[t]);else if(n[t].hasOwnProperty("headNode"))for(let e=0;e<n[t].size();e++)l[o]=n[t].at(e).value.data,o++;else null!=n[t].key&&(l[o]=n[t].data,o++);return console.log(l),l},entries:()=>{let l=[],o=0;for(let t=0;t<e;t++)null!=n[t]&&(l[o]=[n[t].key,n[t].value],o++);return console.log(l),l}}}(16);n.set("apple","red"),n.set("banana","yellow"),n.set("carrot","orange"),n.set("dog","brown"),n.set("elephant","gray"),n.set("frog","green"),n.set("grape","purple"),n.set("hat","black"),n.set("ice cream","white"),n.set("god","is good"),n.set("kite","pink"),n.set("lion","golden"),console.log(n),console.log(n.length()),n.keys(),console.log(n.length()),n.values(),console.log(n.myMap)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,