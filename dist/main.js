(()=>{"use strict";function e(e=null,l=null){return{value:e,next:l}}function l(l){let n=e(l);return{headNode:n,append:l=>{let t=n;for(;null!==t.next;)t=t.next;t.next=e(l)},prepend:l=>{let t=e(l);console.log(`new head ${t.value}`);let o=e(n.value,n.next);console.log(`old head ${o.value}`),t.next=o,n.value=t.value,n.next=t.next,console.log(`headNode ${n.value}`)},size:()=>{if(null==n.next&&null==n.value)return 0;let e=1,l=n;for(;null!==l.next;)l=l.next,e++;return e},head:()=>n,tail:()=>{let e=n;for(;null!==e.next;)e=e.next;return e},at:e=>{let l=n;for(let n=0;n<e;n++)l=l.next;return l},pop:()=>{null==n.next&&(n.value=null);let e=n,l={};for(;null!==e.next;)l=e,e=e.next;l.next=null},contains:e=>{let l=n;for(;null!==l.next;){if(l.value==e)return!0;l=l.next}return l.value==e},find:e=>{let l=n,t=0;for(;null!==l.next;){if(l.value==e)return t;l=l.next,t++}return l.value==e?t:null},toString:()=>{let e="",l=n;for(;null!==l.next;)e=e.concat(`( ${l.value.key} ) -> `),l=l.next;console.log(e.concat(`( ${l.value.key} ) -> null`))}}}let n=function(e){let n=new Array(e),t=e;const o=l=>{let n=0;for(let t=0;t<l.length;t++)n=(31*n+l.charCodeAt(t))%e;return console.log(`${l} is ${n}`),n},r=(e,l)=>{let n=l,t=0;for(;null!==n.next;){if(console.log(`findvalue.value is ${n.value.key}`),n.value.key==e)return t;n=n.next,t++}return n.value.key==e?t:null},a=()=>{let l=0;for(let t=0;t<e;t++)null==n[t]||(n[t].hasOwnProperty("headNode")?l+=n[t].size():l++);return l};return{myMap:n,hash:o,set:(r,u)=>{let s=o(r);if(console.log(`index is ${s}`),console.log(`key is ${r}`),s<0||s>=e)throw new Error("Trying to access index out of bound");if(.75*e<a()&&(()=>{let l=new Array(t);n.push(...l),e+=t})(),null==n[s]||n[s].key==r)n[s]={key:r,data:u};else if(null!=n[s]){console.log("RUH ROH theres a collision"),console.log(n[s]);let e=n[s];if(null==e.headNode){let t=l(e);t.append({key:r,data:u}),n[s]=t}else n[s].append({key:r,data:u})}},get:l=>{let t=o(l);if(t<0||t>=e)throw new Error("Trying to access index out of bound");if(n[t].key==l)return n[t].data;if(null!=n[t].headNode){let e=r(l,n[t].headNode);return n[t].at(e).value.data}return null},has:l=>{let t=o(l);if(t<0||t>=e)throw new Error("Trying to access index out of bound");return null!=n[t]&&(n[t].key==l||null!=n[t].headNode&&null!=r(l,n[t].headNode))},remove:t=>{let a=o(t);if(a<0||a>=e)throw new Error("Trying to access index out of bound");if(console.log("before:"),n[a].toString(),n[a].key==t&&null==n[a].headNode)return console.log("if not a linked list, just make it undefined"),n[a]=void 0,!0;if(n[a].headNode.value.key!=t||null==n[a].headNode.next){if(null!=n[a].headNode){console.log("if a linked list"),console.log("before:"),n[a].toString();let e=n[a],o=e.headNode,u=r(t,e.headNode);console.log(`i is ${u}`);let s=e.size(),d=l(e.headNode.value);for(let e=1;e<s;e++)e!=u&&d.append(o.next.value),o=o.next;return console.log("after:"),d.toString(),n[a]=d,!0}return!1}console.log("it's the first node"),n[a].headNode.value=n[a].headNode.next.value,n[a].headNode.next=n[a].headNode.next.next,console.log("after:"),n[a].toString()},length:a,clear:()=>{for(i=0;i<e;i++)n[i]=void 0},keys:()=>{let l=[],t=0;for(let o=0;o<e;o++){console.log(`myMap${o} is ${n[o]}`);let e=n[o];if(null==e);else if(e.hasOwnProperty("headNode")){console.log("its a linked list");for(let n=0;n<e.size();n++)l[t]=e.at(n).value.key,t++}else l[t]=e.key,t++}return console.log(l),l},values:()=>{let l=[],t=0;for(let o=0;o<e;o++)if(null==n[o]);else if(n[o].hasOwnProperty("headNode"))for(let e=0;e<n[o].size();e++)l[t]=n[o].at(e).value.data,t++;else null!=n[o].key&&(l[t]=n[o].data,t++);return console.log(l),l},entries:()=>{let l=[],t=0;for(let o=0;o<e;o++)if(null==n[o]);else if(n[o].hasOwnProperty("headNode"))for(let e=0;e<n[o].size();e++)l[t]=[n[o].at(e).value.key,n[o].at(e).value.data],t++;else null!=n[o].key&&(l[t]=[n[o].key,n[o].data],t++);return console.log(l),l}}}(16);n.set("apple","red"),n.set("banana","yellow"),n.set("carrot","orange"),n.set("dog","brown"),n.set("elephant","gray"),n.set("frog","green"),n.set("grape","purple"),n.set("hat","black"),n.set("ice cream","white"),n.set("god","is good"),n.set("kite","pink"),n.set("lion","golden"),console.log(n),console.log(n.length()),n.keys(),console.log(n.length()),n.values(),console.log(n.myMap),n.entries()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,