(()=>{"use strict";function e(e=null,l=null){return{value:e,next:l}}function l(l){let o=e(l);return{headNode:o,append:l=>{let t=o;for(;null!==t.next;)t=t.next;t.next=e(l)},prepend:l=>{let t=e(l);console.log(`new head ${t.value}`);let n=e(o.value,o.next);console.log(`old head ${n.value}`),t.next=n,o.value=t.value,o.next=t.next,console.log(`headNode ${o.value}`)},size:()=>{if(null==o.next&&null==o.value)return 0;let e=1,l=o;for(;null!==l.next;)l=l.next,e++;return e},head:()=>o,tail:()=>{let e=o;for(;null!==e.next;)e=e.next;return e},at:e=>{let l=o;for(let o=0;o<e;o++)l=l.next;return l},pop:()=>{null==o.next&&(o.value=null);let e=o,l={};for(;null!==e.next;)l=e,e=e.next;l.next=null},contains:e=>{let l=o;for(;null!==l.next;){if(l.value==e)return!0;l=l.next}return l.value==e},find:e=>{let l=o,t=0;for(;null!==l.next;){if(l.value==e)return t;l=l.next,t++}return l.value==e?t:null},toString:()=>{let e="",l=o;for(;null!==l.next;)e=e.concat(`( ${l.value.key} ) -> `),l=l.next;console.log(e.concat(`( ${l.value.key} ) -> null`))}}}let o=function(e){let o=16,t=new Array(o),n=o;const r=e=>{let l=0;for(let t=0;t<e.length;t++)console.log(`hash size is ${o}`),l=(31*l+e.charCodeAt(t))%o;return console.log(`${e} is ${l}`),l},a=(e,l)=>{let o=l,t=0;for(;null!==o.next;){if(console.log(`findvalue.value is ${o.value.key}`),o.value.key==e)return t;o=o.next,t++}return o.value.key==e?t:null},s=()=>{let e=0;for(let l=0;l<o;l++)null==t[l]||(t[l].hasOwnProperty("headNode")?e+=t[l].size():e++);return e};return{myMap:t,hash:r,set:(e,a)=>{let u=r(e);if(console.log(`index is ${u}`),console.log(`key is ${e}`),u<0||u>=o)throw new Error("Trying to access index out of bound");if(console.log("size * loadfactor "+.75*o),.75*o<s()+1&&(console.log(`EXPANDING size is ${o}`),(()=>{let e=new Array(n);t.push(...e),o+=n})(),console.log(`now size is ${o}`),u=r(e)),null==t[u]||t[u].key==e)t[u]={key:e,data:a};else if(null!=t[u]){console.log("RUH ROH theres a collision"),console.log(t[u]);let o=t[u];if(null==o.headNode){let n=l(o);n.append({key:e,data:a}),t[u]=n}else t[u].append({key:e,data:a})}},get:e=>{let l=r(e);if(l<0||l>=o)throw new Error("Trying to access index out of bound");if(t[l].key==e)return t[l].data;if(null!=t[l].headNode){let o=a(e,t[l].headNode);return t[l].at(o).value.data}return null},has:e=>{let l=r(e);if(l<0||l>=o)throw new Error("Trying to access index out of bound");return null!=t[l]&&(t[l].key==e||null!=t[l].headNode&&null!=a(e,t[l].headNode))},remove:e=>{let n=r(e);if(n<0||n>=o)throw new Error("Trying to access index out of bound");if(console.log("before:"),t[n].toString(),t[n].key==e&&null==t[n].headNode)return console.log("if not a linked list, just make it undefined"),t[n]=void 0,!0;if(t[n].headNode.value.key!=e||null==t[n].headNode.next){if(null!=t[n].headNode){console.log("if a linked list"),console.log("before:"),t[n].toString();let o=t[n],r=o.headNode,s=a(e,o.headNode);console.log(`i is ${s}`);let u=o.size(),i=l(o.headNode.value);for(let e=1;e<u;e++)e!=s&&i.append(r.next.value),r=r.next;return console.log("after:"),i.toString(),t[n]=i,!0}return!1}console.log("it's the first node"),t[n].headNode.value=t[n].headNode.next.value,t[n].headNode.next=t[n].headNode.next.next,console.log("after:"),t[n].toString()},length:s,clear:()=>{for(i=0;i<o;i++)t[i]=void 0},keys:()=>{let e=[],l=0;for(let n=0;n<o;n++){console.log(`myMap${n} is ${t[n]}`);let o=t[n];if(null==o);else if(o.hasOwnProperty("headNode")){console.log("its a linked list");for(let t=0;t<o.size();t++)e[l]=o.at(t).value.key,l++}else e[l]=o.key,l++}return console.log(e),e},values:()=>{let e=[],l=0;for(let n=0;n<o;n++)if(null==t[n]);else if(t[n].hasOwnProperty("headNode"))for(let o=0;o<t[n].size();o++)e[l]=t[n].at(o).value.data,l++;else null!=t[n].key&&(e[l]=t[n].data,l++);return console.log(e),e},entries:()=>{let e=[],l=0;for(let n=0;n<o;n++)if(null==t[n]);else if(t[n].hasOwnProperty("headNode"))for(let o=0;o<t[n].size();o++)e[l]=[t[n].at(o).value.key,t[n].at(o).value.data],l++;else null!=t[n].key&&(e[l]=[t[n].key,t[n].data],l++);return console.log(e),e}}}();o.set("apple","red"),o.set("banana","yellow"),o.set("carrot","orange"),o.set("dog","brown"),o.set("elephant","gray"),o.set("frog","green"),o.set("grape","purple"),o.set("hat","black"),o.set("ice cream","white"),o.set("god","is good"),o.set("kite","pink"),o.set("lion","golden"),console.log(o.myMap),console.log(o.length()),o.set("moon","silver"),console.log(o.myMap),console.log(o.length()),o.set("moofn","silver"),o.set("mooen","silver"),o.set("moeeon","silver"),o.set("moeeofn","silver"),o.set("moeeeeon","silver"),o.set("apeple","red"),o.set("baneana","yellow"),o.set("carerot","orange"),o.set("dfog","brown"),o.set("eleephant","gray"),o.set("frfog","green"),o.set("grgape","purple"),o.set("hgat","black"),o.set("igce cream","white"),o.set("ggÃ§od","is good"),console.log(o.myMap)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUksU0FBVSxPQUNuQlosRUFBS1ksSUFBSSxVQUFXLFVBQ3BCWixFQUFLWSxJQUFJLFVBQVcsVUFDcEJaLEVBQUtZLElBQUksT0FBUSxTQUNqQlosRUFBS1ksSUFBSSxZQUFhLFFBQ3RCWixFQUFLWSxJQUFJLFFBQVMsU0FDbEJaLEVBQUtZLElBQUksU0FBVSxVQUNuQlosRUFBS1ksSUFBSSxPQUFRLFNBQ2pCWixFQUFLWSxJQUFJLGFBQWMsU0FDdkJaLEVBQUtZLElBQUksUUFBUyxXQUNsQmhDLFFBQVFDLElBQUltQixFQUFLRSxNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFzaG1hcC8uL3NyYy9saXN0cy5qcyIsIndlYnBhY2s6Ly9oYXNobWFwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIG5vZGUodmFsdWUgPSBudWxsLCBuZXh0ID0gbnVsbCkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIG5leHQ6IG5leHQgfTtcbn1cblxuZnVuY3Rpb24gbGlua2VkTGlzdChmaXJzdFZhbHVlKSB7XG4gIGxldCBoZWFkTm9kZSA9IG5vZGUoZmlyc3RWYWx1ZSk7XG5cbiAgY29uc3QgYXBwZW5kID0gKHZhbHVlKSA9PiB7XG4gICAgbGV0IGZpbmRUYWlsID0gaGVhZE5vZGU7XG4gICAgd2hpbGUgKGZpbmRUYWlsLm5leHQgIT09IG51bGwpIHtcbiAgICAgIGZpbmRUYWlsID0gZmluZFRhaWwubmV4dDtcbiAgICB9XG4gICAgZmluZFRhaWwubmV4dCA9IG5vZGUodmFsdWUpO1xuICB9O1xuXG4gIGNvbnN0IHByZXBlbmQgPSAodmFsdWUpID0+IHtcbiAgICBsZXQgbmV3SGVhZCA9IG5vZGUodmFsdWUpO1xuICAgIGNvbnNvbGUubG9nKGBuZXcgaGVhZCAke25ld0hlYWQudmFsdWV9YCk7XG4gICAgbGV0IG9sZEhlYWQgPSBub2RlKGhlYWROb2RlLnZhbHVlLCBoZWFkTm9kZS5uZXh0KTtcbiAgICBjb25zb2xlLmxvZyhgb2xkIGhlYWQgJHtvbGRIZWFkLnZhbHVlfWApO1xuICAgIG5ld0hlYWQubmV4dCA9IG9sZEhlYWQ7XG4gICAgaGVhZE5vZGUudmFsdWUgPSBuZXdIZWFkLnZhbHVlO1xuICAgIGhlYWROb2RlLm5leHQgPSBuZXdIZWFkLm5leHQ7XG4gICAgY29uc29sZS5sb2coYGhlYWROb2RlICR7aGVhZE5vZGUudmFsdWV9YCk7XG4gIH07XG5cbiAgY29uc3Qgc2l6ZSA9ICgpID0+IHtcbiAgICBpZiAoaGVhZE5vZGUubmV4dCA9PSBudWxsICYmIGhlYWROb2RlLnZhbHVlID09IG51bGwpIHJldHVybiAwO1xuICAgIGxldCBpID0gMTtcbiAgICBsZXQgY291bnRlciA9IGhlYWROb2RlO1xuICAgIHdoaWxlIChjb3VudGVyLm5leHQgIT09IG51bGwpIHtcbiAgICAgIGNvdW50ZXIgPSBjb3VudGVyLm5leHQ7XG4gICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiBpO1xuICB9O1xuXG4gIGNvbnN0IGhlYWQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGhlYWROb2RlO1xuICB9O1xuXG4gIGNvbnN0IHRhaWwgPSAoKSA9PiB7XG4gICAgbGV0IGZpbmRUYWlsID0gaGVhZE5vZGU7XG4gICAgd2hpbGUgKGZpbmRUYWlsLm5leHQgIT09IG51bGwpIHtcbiAgICAgIGZpbmRUYWlsID0gZmluZFRhaWwubmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIGZpbmRUYWlsO1xuICB9O1xuXG4gIGNvbnN0IGF0ID0gKGluZGV4KSA9PiB7XG4gICAgbGV0IHBvaW50ZXIgPSBoZWFkTm9kZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGV4OyBpKyspIHtcbiAgICAgIHBvaW50ZXIgPSBwb2ludGVyLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiBwb2ludGVyO1xuICB9O1xuXG4gIGNvbnN0IHBvcCA9ICgpID0+IHtcbiAgICBpZiAoaGVhZE5vZGUubmV4dCA9PSBudWxsKSBoZWFkTm9kZS52YWx1ZSA9IG51bGw7XG4gICAgbGV0IGZpbmRUYWlsID0gaGVhZE5vZGU7XG4gICAgbGV0IG5ld1RhaWwgPSB7fTtcbiAgICB3aGlsZSAoZmluZFRhaWwubmV4dCAhPT0gbnVsbCkge1xuICAgICAgbmV3VGFpbCA9IGZpbmRUYWlsO1xuICAgICAgZmluZFRhaWwgPSBmaW5kVGFpbC5uZXh0O1xuICAgIH1cbiAgICBuZXdUYWlsLm5leHQgPSBudWxsO1xuICB9O1xuXG4gIGNvbnN0IGNvbnRhaW5zID0gKHZhbHVlKSA9PiB7XG4gICAgbGV0IGZpbmRWYWx1ZSA9IGhlYWROb2RlO1xuICAgIHdoaWxlIChmaW5kVmFsdWUubmV4dCAhPT0gbnVsbCkge1xuICAgICAgaWYgKGZpbmRWYWx1ZS52YWx1ZSA9PSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgICBmaW5kVmFsdWUgPSBmaW5kVmFsdWUubmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIGZpbmRWYWx1ZS52YWx1ZSA9PSB2YWx1ZTtcbiAgfTtcblxuICBjb25zdCBmaW5kID0gKHZhbHVlKSA9PiB7XG4gICAgbGV0IGZpbmRWYWx1ZSA9IGhlYWROb2RlO1xuICAgIGxldCBpID0gMDtcbiAgICB3aGlsZSAoZmluZFZhbHVlLm5leHQgIT09IG51bGwpIHtcbiAgICAgIGlmIChmaW5kVmFsdWUudmFsdWUgPT0gdmFsdWUpIHJldHVybiBpO1xuICAgICAgZmluZFZhbHVlID0gZmluZFZhbHVlLm5leHQ7XG4gICAgICBpKys7XG4gICAgfVxuICAgIGlmIChmaW5kVmFsdWUudmFsdWUgPT0gdmFsdWUpIHJldHVybiBpO1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIGNvbnN0IHRvU3RyaW5nID0gKCkgPT4ge1xuICAgIGxldCB0b1ByaW50ID0gXCJcIjtcbiAgICBsZXQgZmluZFZhbHVlID0gaGVhZE5vZGU7XG4gICAgd2hpbGUgKGZpbmRWYWx1ZS5uZXh0ICE9PSBudWxsKSB7XG4gICAgICB0b1ByaW50ID0gdG9QcmludC5jb25jYXQoYCggJHtmaW5kVmFsdWUudmFsdWUua2V5fSApIC0+IGApO1xuICAgICAgZmluZFZhbHVlID0gZmluZFZhbHVlLm5leHQ7XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2codG9QcmludC5jb25jYXQoYCggJHtmaW5kVmFsdWUudmFsdWUua2V5fSApIC0+IG51bGxgKSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBoZWFkTm9kZSxcbiAgICBhcHBlbmQsXG4gICAgcHJlcGVuZCxcbiAgICBzaXplLFxuICAgIGhlYWQsXG4gICAgdGFpbCxcbiAgICBhdCxcbiAgICBwb3AsXG4gICAgY29udGFpbnMsXG4gICAgZmluZCxcbiAgICB0b1N0cmluZyxcbiAgfTtcbn1cblxuZXhwb3J0IHsgbm9kZSwgbGlua2VkTGlzdCB9O1xuIiwiaW1wb3J0IHsgbm9kZSwgbGlua2VkTGlzdCB9IGZyb20gXCIuL2xpc3RzLmpzXCI7XG5cbmZ1bmN0aW9uIEhhc2hNYXAocykge1xuICBsZXQgc2l6ZSA9IHM7XG4gIGxldCBteU1hcCA9IG5ldyBBcnJheShzaXplKTtcbiAgbGV0IG9yaWdTaXplID0gc2l6ZTtcbiAgbGV0IGxvYWRGYWN0b3IgPSAwLjc1O1xuXG4gIGNvbnN0IGhhc2ggPSAoa2V5KSA9PiB7XG4gICAgbGV0IGhhc2hDb2RlID0gMDtcblxuICAgIGNvbnN0IHByaW1lTnVtYmVyID0gMzE7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnNvbGUubG9nKGBoYXNoIHNpemUgaXMgJHtzaXplfWApO1xuICAgICAgaGFzaENvZGUgPSAocHJpbWVOdW1iZXIgKiBoYXNoQ29kZSArIGtleS5jaGFyQ29kZUF0KGkpKSAlIHNpemU7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGAke2tleX0gaXMgJHtoYXNoQ29kZX1gKTtcbiAgICByZXR1cm4gaGFzaENvZGU7XG4gIH07XG5cbiAgY29uc3QgZXhwYW5kID0gKCkgPT4ge1xuICAgIGxldCBhZGRPbiA9IG5ldyBBcnJheShvcmlnU2l6ZSk7XG4gICAgbXlNYXAucHVzaCguLi5hZGRPbik7XG4gICAgc2l6ZSArPSBvcmlnU2l6ZTtcbiAgfTtcblxuICAvL3dvcmtzXG4gIGNvbnN0IHNldCA9IChrZXksIGRhdGEpID0+IHtcbiAgICBsZXQgaW5kZXggPSBoYXNoKGtleSk7XG4gICAgY29uc29sZS5sb2coYGluZGV4IGlzICR7aW5kZXh9YCk7XG4gICAgY29uc29sZS5sb2coYGtleSBpcyAke2tleX1gKTtcbiAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHNpemUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRyeWluZyB0byBhY2Nlc3MgaW5kZXggb3V0IG9mIGJvdW5kXCIpO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhgc2l6ZSAqIGxvYWRmYWN0b3IgJHtzaXplICogbG9hZEZhY3Rvcn1gKTtcbiAgICBpZiAoc2l6ZSAqIGxvYWRGYWN0b3IgPCBsZW5ndGgoKSArIDEpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBFWFBBTkRJTkcgc2l6ZSBpcyAke3NpemV9YCk7XG4gICAgICBleHBhbmQoKTtcbiAgICAgIGNvbnNvbGUubG9nKGBub3cgc2l6ZSBpcyAke3NpemV9YCk7XG4gICAgICBpbmRleCA9IGhhc2goa2V5KTtcbiAgICB9XG5cbiAgICBpZiAobXlNYXBbaW5kZXhdID09IHVuZGVmaW5lZCB8fCBteU1hcFtpbmRleF0ua2V5ID09IGtleSkge1xuICAgICAgbXlNYXBbaW5kZXhdID0geyBrZXksIGRhdGEgfTtcbiAgICB9IGVsc2UgaWYgKG15TWFwW2luZGV4XSAhPSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiUlVIIFJPSCB0aGVyZXMgYSBjb2xsaXNpb25cIik7XG4gICAgICBjb25zb2xlLmxvZyhteU1hcFtpbmRleF0pO1xuXG4gICAgICBsZXQgZGF0YUluQnVja2V0ID0gbXlNYXBbaW5kZXhdO1xuXG4gICAgICBpZiAoZGF0YUluQnVja2V0LmhlYWROb2RlID09IHVuZGVmaW5lZCkge1xuICAgICAgICAvL25lZWQgdG8gY29udmVydCB0byBsaW5rZWQgbGlzdFxuICAgICAgICBsZXQgbmV3TGlzdCA9IGxpbmtlZExpc3QoZGF0YUluQnVja2V0KTtcbiAgICAgICAgbmV3TGlzdC5hcHBlbmQoeyBrZXksIGRhdGEgfSk7XG4gICAgICAgIG15TWFwW2luZGV4XSA9IG5ld0xpc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL2l0J3MgYWxyZWFkeSBhIGxpbmtlZCBsaXN0XG4gICAgICAgIG15TWFwW2luZGV4XS5hcHBlbmQoeyBrZXksIGRhdGEgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vd29ya3NcbiAgY29uc3QgZ2V0ID0gKGtleSkgPT4ge1xuICAgIGxldCBpbmRleCA9IGhhc2goa2V5KTtcbiAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHNpemUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRyeWluZyB0byBhY2Nlc3MgaW5kZXggb3V0IG9mIGJvdW5kXCIpO1xuICAgIH1cbiAgICBpZiAobXlNYXBbaW5kZXhdLmtleSA9PSBrZXkpIHtcbiAgICAgIHJldHVybiBteU1hcFtpbmRleF0uZGF0YTtcbiAgICB9IGVsc2UgaWYgKG15TWFwW2luZGV4XS5oZWFkTm9kZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgIGxldCBpID0gZmluZChrZXksIG15TWFwW2luZGV4XS5oZWFkTm9kZSk7XG4gICAgICByZXR1cm4gbXlNYXBbaW5kZXhdLmF0KGkpLnZhbHVlLmRhdGE7XG4gICAgfSBlbHNlIHJldHVybiBudWxsO1xuICB9O1xuXG4gIGNvbnN0IGhhcyA9IChrZXkpID0+IHtcbiAgICBsZXQgaW5kZXggPSBoYXNoKGtleSk7XG4gICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSBzaXplKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcnlpbmcgdG8gYWNjZXNzIGluZGV4IG91dCBvZiBib3VuZFwiKTtcbiAgICB9XG4gICAgaWYgKG15TWFwW2luZGV4XSA9PSB1bmRlZmluZWQpIHJldHVybiBmYWxzZTtcbiAgICBlbHNlIGlmIChteU1hcFtpbmRleF0ua2V5ID09IGtleSkgcmV0dXJuIHRydWU7XG4gICAgZWxzZSBpZiAobXlNYXBbaW5kZXhdLmhlYWROb2RlICE9IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGZpbmQoa2V5LCBteU1hcFtpbmRleF0uaGVhZE5vZGUpICE9IG51bGwpIHJldHVybiB0cnVlO1xuICAgICAgZWxzZSByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICAvL3dvcmtzLCBidXQgd2hhdCBpZiB3ZSByZW1vdmUgdGhlIGxhc3Qgb25lIGluIExMPz8/XG4gIGNvbnN0IHJlbW92ZSA9IChrZXkpID0+IHtcbiAgICBsZXQgaW5kZXggPSBoYXNoKGtleSk7XG4gICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSBzaXplKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcnlpbmcgdG8gYWNjZXNzIGluZGV4IG91dCBvZiBib3VuZFwiKTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJiZWZvcmU6XCIpO1xuICAgIG15TWFwW2luZGV4XS50b1N0cmluZygpO1xuICAgIGlmIChteU1hcFtpbmRleF0ua2V5ID09IGtleSAmJiBteU1hcFtpbmRleF0uaGVhZE5vZGUgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvL2lmIG5vdCBhIGxpbmtlZCBsaXN0LCBqdXN0IG1ha2UgaXQgdW5kZWZpbmVkXG4gICAgICBjb25zb2xlLmxvZyhcImlmIG5vdCBhIGxpbmtlZCBsaXN0LCBqdXN0IG1ha2UgaXQgdW5kZWZpbmVkXCIpO1xuICAgICAgbXlNYXBbaW5kZXhdID0gdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIG15TWFwW2luZGV4XS5oZWFkTm9kZS52YWx1ZS5rZXkgPT0ga2V5ICYmXG4gICAgICBteU1hcFtpbmRleF0uaGVhZE5vZGUubmV4dCAhPSB1bmRlZmluZWRcbiAgICApIHtcbiAgICAgIC8vaWYgaXQgaXMgYSBsaW5rZWQgbGlzdCBhbmQgaXQncyB0aGUgZmlyc3Qgbm9kZVxuICAgICAgY29uc29sZS5sb2coYGl0J3MgdGhlIGZpcnN0IG5vZGVgKTtcbiAgICAgIG15TWFwW2luZGV4XS5oZWFkTm9kZS52YWx1ZSA9IG15TWFwW2luZGV4XS5oZWFkTm9kZS5uZXh0LnZhbHVlO1xuICAgICAgbXlNYXBbaW5kZXhdLmhlYWROb2RlLm5leHQgPSBteU1hcFtpbmRleF0uaGVhZE5vZGUubmV4dC5uZXh0O1xuICAgICAgY29uc29sZS5sb2coXCJhZnRlcjpcIik7XG4gICAgICBteU1hcFtpbmRleF0udG9TdHJpbmcoKTtcbiAgICB9IGVsc2UgaWYgKG15TWFwW2luZGV4XS5oZWFkTm9kZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgIC8vaWYgYSBsaW5rZWQgbGlzdCBidXQgTk9UIHRoZSBmaXJzdCBub2RlXG5cbiAgICAgIGNvbnNvbGUubG9nKFwiaWYgYSBsaW5rZWQgbGlzdFwiKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiYmVmb3JlOlwiKTtcbiAgICAgIG15TWFwW2luZGV4XS50b1N0cmluZygpO1xuICAgICAgbGV0IG15TGlzdCA9IG15TWFwW2luZGV4XTtcbiAgICAgIGxldCBmaW5kZXIgPSBteUxpc3QuaGVhZE5vZGU7XG4gICAgICBsZXQgaSA9IGZpbmQoa2V5LCBteUxpc3QuaGVhZE5vZGUpO1xuICAgICAgY29uc29sZS5sb2coYGkgaXMgJHtpfWApO1xuICAgICAgbGV0IHNpemUgPSBteUxpc3Quc2l6ZSgpO1xuXG4gICAgICAvL21ha2UgdGhlIGhlYWRub2RlLCBhc3N1bWluZyBpdHMgbm90IHdoYXQgd2UncmUgcmVtb3ZpbmdcbiAgICAgIGxldCBuZXdMaXN0ID0gbGlua2VkTGlzdChteUxpc3QuaGVhZE5vZGUudmFsdWUpO1xuXG4gICAgICBmb3IgKGxldCBrID0gMTsgayA8IHNpemU7IGsrKykge1xuICAgICAgICBpZiAoayAhPSBpKSB7XG4gICAgICAgICAgbmV3TGlzdC5hcHBlbmQoZmluZGVyLm5leHQudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmRlciA9IGZpbmRlci5uZXh0O1xuICAgICAgfVxuICAgICAgY29uc29sZS5sb2coXCJhZnRlcjpcIik7XG4gICAgICBuZXdMaXN0LnRvU3RyaW5nKCk7XG4gICAgICBteU1hcFtpbmRleF0gPSBuZXdMaXN0O1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBjb25zdCBmaW5kID0gKHZhbHVlLCBoZWFkTm9kZSkgPT4ge1xuICAgIGxldCBmaW5kVmFsdWUgPSBoZWFkTm9kZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgd2hpbGUgKGZpbmRWYWx1ZS5uZXh0ICE9PSBudWxsKSB7XG4gICAgICBjb25zb2xlLmxvZyhgZmluZHZhbHVlLnZhbHVlIGlzICR7ZmluZFZhbHVlLnZhbHVlLmtleX1gKTtcbiAgICAgIGlmIChmaW5kVmFsdWUudmFsdWUua2V5ID09IHZhbHVlKSByZXR1cm4gaTtcbiAgICAgIGZpbmRWYWx1ZSA9IGZpbmRWYWx1ZS5uZXh0O1xuICAgICAgaSsrO1xuICAgIH1cbiAgICBpZiAoZmluZFZhbHVlLnZhbHVlLmtleSA9PSB2YWx1ZSkgcmV0dXJuIGk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgY29uc3QgbGVuZ3RoID0gKCkgPT4ge1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgIGlmIChteU1hcFtpXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy9kb25vdGhpbmdcbiAgICAgIH0gZWxzZSBpZiAobXlNYXBbaV0uaGFzT3duUHJvcGVydHkoXCJoZWFkTm9kZVwiKSkge1xuICAgICAgICBjb3VudCArPSBteU1hcFtpXS5zaXplKCk7XG4gICAgICB9IGVsc2UgY291bnQrKztcbiAgICB9XG4gICAgcmV0dXJuIGNvdW50O1xuICB9O1xuXG4gIGNvbnN0IGNsZWFyID0gKCkgPT4ge1xuICAgIGZvciAoaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgIG15TWFwW2ldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBrZXlzID0gKCkgPT4ge1xuICAgIGxldCBhbGxLZXlzID0gW107XG4gICAgbGV0IGsgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICBjb25zb2xlLmxvZyhgbXlNYXAke2l9IGlzICR7bXlNYXBbaV19YCk7XG4gICAgICBsZXQgYnVja2V0ID0gbXlNYXBbaV07XG4gICAgICBpZiAoYnVja2V0ID09IHVuZGVmaW5lZCkge1xuICAgICAgICAvKmRvIG5vdGhpbmcgKi9cbiAgICAgIH0gZWxzZSBpZiAoYnVja2V0Lmhhc093blByb3BlcnR5KFwiaGVhZE5vZGVcIikpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJpdHMgYSBsaW5rZWQgbGlzdFwiKTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBidWNrZXQuc2l6ZSgpOyBqKyspIHtcbiAgICAgICAgICBhbGxLZXlzW2tdID0gYnVja2V0LmF0KGopLnZhbHVlLmtleTtcbiAgICAgICAgICBrKys7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFsbEtleXNba10gPSBidWNrZXQua2V5O1xuICAgICAgICBrKys7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGFsbEtleXMpO1xuICAgIHJldHVybiBhbGxLZXlzO1xuICB9O1xuXG4gIGNvbnN0IHZhbHVlcyA9ICgpID0+IHtcbiAgICBsZXQgYWxsVmFsdWVzID0gW107XG4gICAgbGV0IGsgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICBpZiAobXlNYXBbaV0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vZG8gbm90aGluZ1xuICAgICAgfSBlbHNlIGlmIChteU1hcFtpXS5oYXNPd25Qcm9wZXJ0eShcImhlYWROb2RlXCIpKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbXlNYXBbaV0uc2l6ZSgpOyBqKyspIHtcbiAgICAgICAgICBhbGxWYWx1ZXNba10gPSBteU1hcFtpXS5hdChqKS52YWx1ZS5kYXRhO1xuICAgICAgICAgIGsrKztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChteU1hcFtpXS5rZXkgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGFsbFZhbHVlc1trXSA9IG15TWFwW2ldLmRhdGE7XG4gICAgICAgIGsrKztcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS5sb2coYWxsVmFsdWVzKTtcbiAgICByZXR1cm4gYWxsVmFsdWVzO1xuICB9O1xuXG4gIGNvbnN0IGVudHJpZXMgPSAoKSA9PiB7XG4gICAgbGV0IGFsbEVudHJpZXMgPSBbXTtcbiAgICBsZXQgayA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgIGlmIChteU1hcFtpXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy9kbyBub3RoaW5nXG4gICAgICB9IGVsc2UgaWYgKG15TWFwW2ldLmhhc093blByb3BlcnR5KFwiaGVhZE5vZGVcIikpIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBteU1hcFtpXS5zaXplKCk7IGorKykge1xuICAgICAgICAgIGFsbEVudHJpZXNba10gPSBbbXlNYXBbaV0uYXQoaikudmFsdWUua2V5LCBteU1hcFtpXS5hdChqKS52YWx1ZS5kYXRhXTtcbiAgICAgICAgICBrKys7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobXlNYXBbaV0ua2V5ICE9IHVuZGVmaW5lZCkge1xuICAgICAgICBhbGxFbnRyaWVzW2tdID0gW215TWFwW2ldLmtleSwgbXlNYXBbaV0uZGF0YV07XG4gICAgICAgIGsrKztcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS5sb2coYWxsRW50cmllcyk7XG4gICAgcmV0dXJuIGFsbEVudHJpZXM7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBteU1hcCxcbiAgICBoYXNoLFxuICAgIHNldCxcbiAgICBnZXQsXG4gICAgaGFzLFxuICAgIHJlbW92ZSxcbiAgICBsZW5ndGgsXG4gICAgY2xlYXIsXG4gICAga2V5cyxcbiAgICB2YWx1ZXMsXG4gICAgZW50cmllcyxcbiAgfTtcbn1cblxubGV0IHRlc3QgPSBIYXNoTWFwKDE2KTtcbnRlc3Quc2V0KFwiYXBwbGVcIiwgXCJyZWRcIik7XG50ZXN0LnNldChcImJhbmFuYVwiLCBcInllbGxvd1wiKTtcbnRlc3Quc2V0KFwiY2Fycm90XCIsIFwib3JhbmdlXCIpO1xudGVzdC5zZXQoXCJkb2dcIiwgXCJicm93blwiKTtcbnRlc3Quc2V0KFwiZWxlcGhhbnRcIiwgXCJncmF5XCIpO1xudGVzdC5zZXQoXCJmcm9nXCIsIFwiZ3JlZW5cIik7XG50ZXN0LnNldChcImdyYXBlXCIsIFwicHVycGxlXCIpO1xudGVzdC5zZXQoXCJoYXRcIiwgXCJibGFja1wiKTtcbnRlc3Quc2V0KFwiaWNlIGNyZWFtXCIsIFwid2hpdGVcIik7XG50ZXN0LnNldChcImdvZFwiLCBcImlzIGdvb2RcIik7XG50ZXN0LnNldChcImtpdGVcIiwgXCJwaW5rXCIpO1xudGVzdC5zZXQoXCJsaW9uXCIsIFwiZ29sZGVuXCIpO1xuXG5jb25zb2xlLmxvZyh0ZXN0Lm15TWFwKTtcbmNvbnNvbGUubG9nKHRlc3QubGVuZ3RoKCkpO1xuLy8gY29uc29sZS5sb2codGVzdC5nZXQoXCJmcm9nXCIpKTtcbi8vIGNvbnNvbGUubG9nKHRlc3QuZ2V0KFwiZ29kXCIpKTtcbi8vIHRlc3QucmVtb3ZlKFwibGlvblwiKTtcbi8vIGNvbnNvbGUubG9nKHRlc3QpO1xuLy8gY29uc29sZS5sb2coYGhhcyBpY2UgY3JlYW0/ICR7dGVzdC5oYXMoXCJpY2UgY3JlYW1cIil9YCk7XG4vLyB0ZXN0LmtleXMoKTtcbi8vIGNvbnNvbGUubG9nKHRlc3QubGVuZ3RoKCkpO1xuLy8gdGVzdC52YWx1ZXMoKTtcbi8vIGNvbnNvbGUubG9nKHRlc3QubXlNYXApO1xuLy8gdGVzdC5lbnRyaWVzKCk7XG50ZXN0LnNldChcIm1vb25cIiwgXCJzaWx2ZXJcIik7XG5jb25zb2xlLmxvZyh0ZXN0Lm15TWFwKTtcbmNvbnNvbGUubG9nKHRlc3QubGVuZ3RoKCkpO1xudGVzdC5zZXQoXCJtb29mblwiLCBcInNpbHZlclwiKTtcbnRlc3Quc2V0KFwibW9vZW5cIiwgXCJzaWx2ZXJcIik7XG50ZXN0LnNldChcIm1vZWVvblwiLCBcInNpbHZlclwiKTtcbnRlc3Quc2V0KFwibW9lZW9mblwiLCBcInNpbHZlclwiKTtcbnRlc3Quc2V0KFwibW9lZWVlb25cIiwgXCJzaWx2ZXJcIik7XG50ZXN0LnNldChcImFwZXBsZVwiLCBcInJlZFwiKTtcbnRlc3Quc2V0KFwiYmFuZWFuYVwiLCBcInllbGxvd1wiKTtcbnRlc3Quc2V0KFwiY2FyZXJvdFwiLCBcIm9yYW5nZVwiKTtcbnRlc3Quc2V0KFwiZGZvZ1wiLCBcImJyb3duXCIpO1xudGVzdC5zZXQoXCJlbGVlcGhhbnRcIiwgXCJncmF5XCIpO1xudGVzdC5zZXQoXCJmcmZvZ1wiLCBcImdyZWVuXCIpO1xudGVzdC5zZXQoXCJncmdhcGVcIiwgXCJwdXJwbGVcIik7XG50ZXN0LnNldChcImhnYXRcIiwgXCJibGFja1wiKTtcbnRlc3Quc2V0KFwiaWdjZSBjcmVhbVwiLCBcIndoaXRlXCIpO1xudGVzdC5zZXQoXCJnZ8Onb2RcIiwgXCJpcyBnb29kXCIpO1xuY29uc29sZS5sb2codGVzdC5teU1hcCk7XG4iXSwibmFtZXMiOlsibm9kZSIsInZhbHVlIiwibmV4dCIsImxpbmtlZExpc3QiLCJmaXJzdFZhbHVlIiwiaGVhZE5vZGUiLCJhcHBlbmQiLCJmaW5kVGFpbCIsInByZXBlbmQiLCJuZXdIZWFkIiwiY29uc29sZSIsImxvZyIsIm9sZEhlYWQiLCJzaXplIiwiaSIsImNvdW50ZXIiLCJoZWFkIiwidGFpbCIsImF0IiwiaW5kZXgiLCJwb2ludGVyIiwicG9wIiwibmV3VGFpbCIsImNvbnRhaW5zIiwiZmluZFZhbHVlIiwiZmluZCIsInRvU3RyaW5nIiwidG9QcmludCIsImNvbmNhdCIsImtleSIsInRlc3QiLCJzIiwibXlNYXAiLCJBcnJheSIsIm9yaWdTaXplIiwiaGFzaCIsImhhc2hDb2RlIiwibGVuZ3RoIiwiY2hhckNvZGVBdCIsImNvdW50IiwidW5kZWZpbmVkIiwiaGFzT3duUHJvcGVydHkiLCJzZXQiLCJkYXRhIiwiRXJyb3IiLCJhZGRPbiIsInB1c2giLCJleHBhbmQiLCJkYXRhSW5CdWNrZXQiLCJuZXdMaXN0IiwiZ2V0IiwiaGFzIiwicmVtb3ZlIiwibXlMaXN0IiwiZmluZGVyIiwiayIsImNsZWFyIiwia2V5cyIsImFsbEtleXMiLCJidWNrZXQiLCJqIiwidmFsdWVzIiwiYWxsVmFsdWVzIiwiZW50cmllcyIsImFsbEVudHJpZXMiLCJIYXNoTWFwIl0sInNvdXJjZVJvb3QiOiIifQ==